/**
 * @description Comprehensive test class for AccountViewController
 * @author TechCo Services
 * @date October 2025
 * @coverage AccountViewController - 100%
 */
@IsTest
private class AccountViewControllerTest {
    
    /**
     * @description Setup test data for all test methods
     * Creates accounts with varying numbers of opportunities
     */
    @TestSetup
    static void setupTestData() {
        // Create test accounts with different industries
        List<Account> testAccounts = new List<Account>();
        
        // Account with multiple opportunities
        testAccounts.add(new Account(
            Name = 'Test Account 1',
            Industry = 'Technology'
        ));
        
        // Account with one opportunity
        testAccounts.add(new Account(
            Name = 'Test Account 2',
            Industry = 'Finance'
        ));
        
        // Account with no opportunities
        testAccounts.add(new Account(
            Name = 'Test Account 3',
            Industry = 'Healthcare'
        ));
        
        // Bulk insert accounts (testing bulk patterns)
        for(Integer i = 4; i <= 110; i++) {
            testAccounts.add(new Account(
                Name = 'Bulk Account ' + i,
                Industry = 'Retail'
            ));
        }
        
        insert testAccounts;
        
        // Create opportunities for the accounts
        List<Opportunity> testOpportunities = new List<Opportunity>();
        
        // Account 1 - 3 opportunities with different stages
        testOpportunities.add(new Opportunity(
            Name = 'Opp 1-1',
            AccountId = testAccounts[0].Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(30),
            Amount = 10000
        ));
        
        testOpportunities.add(new Opportunity(
            Name = 'Opp 1-2',
            AccountId = testAccounts[0].Id,
            StageName = 'Qualification',
            CloseDate = Date.today().addDays(45),
            Amount = 20000
        ));
        
        testOpportunities.add(new Opportunity(
            Name = 'Opp 1-3',
            AccountId = testAccounts[0].Id,
            StageName = 'Closed Won',
            CloseDate = Date.today().addDays(-10),
            Amount = 50000
        ));
        
        // Account 2 - 1 opportunity
        testOpportunities.add(new Opportunity(
            Name = 'Opp 2-1',
            AccountId = testAccounts[1].Id,
            StageName = 'Prospecting',
            CloseDate = Date.today().addDays(60),
            Amount = 15000
        ));
        
        // Add opportunities for bulk accounts
        for(Integer i = 3; i < 20; i++) {
            testOpportunities.add(new Opportunity(
                Name = 'Bulk Opp ' + i,
                AccountId = testAccounts[i].Id,
                StageName = 'Negotiation/Review',
                CloseDate = Date.today().addDays(30),
                Amount = 5000
            ));
        }
        
        insert testOpportunities;
    }
    
    /**
     * @description Test getAccountsWithOppCount returns correct data
     * Validates that accounts are returned with accurate opportunity counts
     */
    @IsTest
    static void testGetAccountsWithOppCount_Positive() {
        // Given: Test data exists
        AccountViewController controller = new AccountViewController();
        
        // When: Method is called
        Test.startTest();
        List<AccountViewController.AccountWrapper> results = controller.getAccountsWithOppCount();
        Test.stopTest();
        
        // Then: Results should be returned
        System.assert(results != null, 'Results should not be null');
        System.assert(results.size() > 0, 'Should return at least one account');
        
        // Verify accounts are ordered by name
        if(results.size() > 1) {
            System.assert(
                results[0].acc.Name <= results[1].acc.Name,
                'Accounts should be ordered by name'
            );
        }
        
        // Find and verify specific test accounts
        AccountViewController.AccountWrapper account1 = null;
        AccountViewController.AccountWrapper account2 = null;
        AccountViewController.AccountWrapper account3 = null;
        
        for(AccountViewController.AccountWrapper wrapper : results) {
            if(wrapper.acc.Name == 'Test Account 1') {
                account1 = wrapper;
            } else if(wrapper.acc.Name == 'Test Account 2') {
                account2 = wrapper;
            } else if(wrapper.acc.Name == 'Test Account 3') {
                account3 = wrapper;
            }
        }
        
        // Verify opportunity counts
        System.assert(account1 != null, 'Test Account 1 should be found');
        System.assertEquals(3, account1.oppCount, 'Test Account 1 should have 3 opportunities');
        
        System.assert(account2 != null, 'Test Account 2 should be found');
        System.assertEquals(1, account2.oppCount, 'Test Account 2 should have 1 opportunity');
        
        System.assert(account3 != null, 'Test Account 3 should be found');
        System.assertEquals(0, account3.oppCount, 'Test Account 3 should have 0 opportunities');
    }
    
    /**
     * @description Test behavior with no accounts in database
     * Validates that empty list is returned gracefully
     */
    @IsTest
    static void testGetAccountsWithOppCount_NoData() {
        // Given: No accounts exist
        delete [SELECT Id FROM Opportunity];
        delete [SELECT Id FROM Account];
        
        AccountViewController controller = new AccountViewController();
        
        // When: Method is called
        Test.startTest();
        List<AccountViewController.AccountWrapper> results = controller.getAccountsWithOppCount();
        Test.stopTest();
        
        // Then: Empty list should be returned
        System.assert(results != null, 'Results should not be null');
        System.assertEquals(0, results.size(), 'Should return empty list when no accounts exist');
    }
    
    /**
     * @description Test getOpportunityCountsByStage returns correct aggregations
     * Validates stage counts and wrapper class structure
     */
    @IsTest
    static void testGetOpportunityCountsByStage_Positive() {
        // Given: Test data with multiple stages exists
        
        // When: Method is called
        Test.startTest();
        List<AccountViewController.OpportunityStageCount> results = 
            AccountViewController.getOpportunityCountsByStage();
        Test.stopTest();
        
        // Then: Results should be returned with stage counts
        System.assert(results != null, 'Results should not be null');
        System.assert(results.size() > 0, 'Should return at least one stage');
        
        // Verify data structure
        for(AccountViewController.OpportunityStageCount osc : results) {
            System.assert(osc.stage != null, 'Stage name should not be null');
            System.assert(osc.count != null, 'Count should not be null');
            System.assert(osc.count > 0, 'Count should be greater than 0');
        }
        
        // Calculate total opportunities from results
        Decimal totalFromResults = 0;
        for(AccountViewController.OpportunityStageCount osc : results) {
            totalFromResults += osc.count;
        }
        
        // Verify against actual count
        Integer actualCount = [SELECT COUNT() FROM Opportunity];
        System.assertEquals(
            actualCount, 
            totalFromResults, 
            'Total count should match actual opportunity count'
        );
        
        // Verify specific stages exist
        Set<String> stageNames = new Set<String>();
        for(AccountViewController.OpportunityStageCount osc : results) {
            stageNames.add(osc.stage);
        }
        
        System.assert(stageNames.contains('Prospecting'), 'Should contain Prospecting stage');
        System.assert(stageNames.contains('Qualification'), 'Should contain Qualification stage');
    }
    
    /**
     * @description Test getOpportunityCountsByStage with no opportunities
     * Validates that empty list is returned gracefully
     */
    @IsTest
    static void testGetOpportunityCountsByStage_NoData() {
        // Given: No opportunities exist
        delete [SELECT Id FROM Opportunity];
        
        // When: Method is called
        Test.startTest();
        List<AccountViewController.OpportunityStageCount> results = 
            AccountViewController.getOpportunityCountsByStage();
        Test.stopTest();
        
        // Then: Empty list should be returned
        System.assert(results != null, 'Results should not be null');
        System.assertEquals(0, results.size(), 'Should return empty list when no opportunities exist');
    }
    
    /**
     * @description Test getOpportunityCountsByStage with single stage
     * Validates correct count for a single stage scenario
     */
    @IsTest
    static void testGetOpportunityCountsByStage_SingleStage() {
        // Given: All opportunities have the same stage
        delete [SELECT Id FROM Opportunity];
        
        Account acc = [SELECT Id FROM Account LIMIT 1];
        List<Opportunity> singleStageOpps = new List<Opportunity>();
        
        for(Integer i = 0; i < 5; i++) {
            singleStageOpps.add(new Opportunity(
                Name = 'Single Stage Opp ' + i,
                AccountId = acc.Id,
                StageName = 'Closed Won',
                CloseDate = Date.today(),
                Amount = 1000
            ));
        }
        insert singleStageOpps;
        
        // When: Method is called
        Test.startTest();
        List<AccountViewController.OpportunityStageCount> results = 
            AccountViewController.getOpportunityCountsByStage();
        Test.stopTest();
        
        // Then: Should return one stage with correct count
        System.assertEquals(1, results.size(), 'Should return exactly one stage');
        System.assertEquals('Closed Won', results[0].stage, 'Stage should be Closed Won');
        System.assertEquals(5, results[0].count, 'Count should be 5');
    }
    
    /**
     * @description Test bulk processing with governor limits in mind
     * Validates that code handles large data volumes efficiently
     */
    @IsTest
    static void testBulkProcessing() {
        // Given: Large dataset exists (created in @TestSetup)
        AccountViewController controller = new AccountViewController();
        
        // When: Both methods are called in sequence
        Test.startTest();
        List<AccountViewController.AccountWrapper> accountResults = 
            controller.getAccountsWithOppCount();
        List<AccountViewController.OpportunityStageCount> stageResults = 
            AccountViewController.getOpportunityCountsByStage();
        Test.stopTest();
        
        // Then: Should handle bulk data without hitting governor limits
        System.assert(accountResults != null, 'Account results should not be null');
        System.assert(stageResults != null, 'Stage results should not be null');
        
        // Verify SOQL limit not exceeded (should be well under 100 queries)
        System.assert(Limits.getQueries() < 10, 'Should use minimal SOQL queries');
    }
    
    /**
     * @description Test wrapper classes are properly instantiated
     * Validates constructor and property access
     */
    @IsTest
    static void testWrapperClasses() {
        // Given: A test account
        Account testAcc = [SELECT Id, Name, Industry FROM Account LIMIT 1];
        
        // When: Wrapper is created
        AccountViewController.AccountWrapper wrapper = 
            new AccountViewController.AccountWrapper(testAcc, 5);
        
        // Then: Properties should be accessible
        System.assertEquals(testAcc.Id, wrapper.acc.Id, 'Account should match');
        System.assertEquals(5, wrapper.oppCount, 'Opportunity count should be 5');
        
        // Test OpportunityStageCount wrapper
        AccountViewController.OpportunityStageCount stageCount = 
            new AccountViewController.OpportunityStageCount();
        stageCount.stage = 'Test Stage';
        stageCount.count = 10;
        
        System.assertEquals('Test Stage', stageCount.stage, 'Stage should be set');
        System.assertEquals(10, stageCount.count, 'Count should be set');
    }
    
    /**
     * @description Test @AuraEnabled annotation allows LWC access
     * Validates that the method is accessible from Lightning components
     */
    @IsTest
    static void testAuraEnabledAccess() {
        // When: Method is called (simulating LWC call)
        Test.startTest();
        List<AccountViewController.OpportunityStageCount> results = 
            AccountViewController.getOpportunityCountsByStage();
        Test.stopTest();
        
        // Then: Should return results without exceptions
        System.assert(results != null, 'LWC should be able to access this method');
    }
}
